using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright 2006-2018 Prowide
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace com.prowidesoftware.swift.model
{

	using Gson = com.google.gson.Gson;
	using GsonBuilder = com.google.gson.GsonBuilder;
	using ProwideDeprecated = com.prowidesoftware.deprecation.ProwideDeprecated;
	using TargetYear = com.prowidesoftware.deprecation.TargetYear;
	using Validate = org.apache.commons.lang3.Validate;


	/// <summary>
	/// Base class for SWIFT <b>Application Header Block (block 2)
	/// for INPUT (to SWIFT)</b>.<br>
	/// This block is used to construct messages that are going 
	/// to be <i>input</i> to the SWIFT network. From the application point
	/// of view, it correspond to the <i>SENT</i> messages.<br><br>
	/// 
	/// <para>It's value is fixed-length and continuous with no field delimiters. 
	/// This class contains its elements as individual attributes for 
	/// easier management of the block value.
	/// 
	/// </para>
	/// <para>This class does not provide explicit API to get the MIR of an 
	/// outgoing message because it should be created using the session and 
	/// sequence numbers at header block 1, and this information is not usually 
	/// generated by the application creating the message but by the SWIFT 
	/// Alliance interface. Therefore neither SwiftBLock1 or SwiftBlock2Input 
	/// provide a getter for the MIR.<br>
	/// It also does not provide any API to get the MOR of a sent message 
	/// because that information will be available only when the message 
	/// is delivered at destination.
	/// 
	/// @since 4.0
	/// </para>
	/// </summary>
	/// <seealso cref= MIR </seealso>
	//TODO: add parameter checks (Validate.*) and complete javadocs 
	[Serializable]
	public class SwiftBlock2Input : SwiftBlock2
	{
//JAVA TO C# CONVERTER WARNING: The .NET Type.FullName property will not always yield results identical to the Java Class.getName method:
		[NonSerialized]
		private static readonly java.util.logging.Logger log = java.util.logging.Logger.getLogger(typeof(SwiftBlock2).FullName);
		private const long serialVersionUID = 6094810199379196198L;
		private static readonly string SEPARATOR = "\", \n";



		/// <summary>
		/// Receiver's address with X in position 9.<br> 
		/// It is fixed at 12 characters; it must have X in position 9
		/// (padded with "X" if no branch is required).
		/// </summary>
		private string receiverAddress;

		/// <summary>
		/// String of 1 character containing the Delivery Monitoring field is as follows:<br>
		/// 1 = Non-Delivery Warning<br>
		/// 2 = Delivery Notification<br>
		/// 3 = Both valid, Non-Delivery Warning and Delivery Notification<br>
		/// This value is optional.<br>
		/// If the priority is U, delivery monitoring must be: 1 or 3.<br> 
		/// If the priority is N, delivery monitoring must be: 2 or not included.
		/// </summary>
		private string deliveryMonitoring;

		/// <summary>
		/// String of 3 characters containing the Obsolescence Period.<br> 
		/// It specifies when a non-delivery notification is generated as follows:<br>
		/// Valid for U = 003 (15 minutes)<br>
		/// Valid for N = 020 (100 minutes)<br>
		/// This value is optional.
		/// </summary>
		private string obsolescencePeriod;

		/// <summary>
		/// Constructor for specific values
		/// </summary>
		/// <param name="messageType"> the message type </param>
		/// <param name="receiverAddress"> the receiver address </param>
		/// <param name="messagePriority"> the message priority (S=system, U=urgent, N=normal) </param>
		/// <param name="deliveryMonitoring"> the delivery monitoring option (1 or 3 for U priority, 2 for N priority) </param>
		/// <param name="obsolescencePeriod"> the obsolescence period, measured in 5 minutes units (3 for priority U, 20 for priority N).<br>
		/// According to SWIFT documentation, this value is ignored by the system </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public SwiftBlock2Input(final String messageType, final String receiverAddress, final String messagePriority, final String deliveryMonitoring, final String obsolescencePeriod)
		public SwiftBlock2Input(string messageType, string receiverAddress, string messagePriority, string deliveryMonitoring, string obsolescencePeriod)
		{
			this.input = true;
			this.messageType = messageType;
			this.receiverAddress = receiverAddress;
			this.messagePriority = messagePriority;
			this.deliveryMonitoring = deliveryMonitoring;
			this.obsolescencePeriod = obsolescencePeriod;
		}

		/// <summary>
		/// Creates the block with lenient false, meaning it expects a fixed length value.
		/// Example of supported values:<br> 
		/// "I100BANKDEFFXXXXU3003" (21) or "2:I100BANKDEFFXXXXU3003" (23)
		/// "I100BANKDEFFXXXXU3" (18) or "2:I100BANKDEFFXXXXU3" (20)
		/// "I100BANKDEFFXXXXU" (17) or "2:I100BANKDEFFXXXXU" (19)
		/// </summary>
		/// <param name="value"> a string with length between 16 and 23 containing the blocks value </param>
		/// <exception cref="IllegalArgumentException"> if parameter has an invalid total size </exception>
		/// <seealso cref= #setValue(String, boolean) </seealso>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public SwiftBlock2Input(final String value)
		public SwiftBlock2Input(string value) : this(value, false)
		{
		}

		/// <summary>
		/// Creates a block 2 output object setting attributes by parsing the string argument containing the blocks value. 
		/// This value can be in different flavors because some fields are optional.<br>
		/// </summary>
		/// <param name="value"> string containing the entire blocks value </param>
		/// <param name="lenient"> if true the value will be parsed with a best effort heuristic, if false it will throw a IllegalArgumentException if the value has an invalid total size </param>
		/// <seealso cref= #setValue(String, boolean)
		/// @since 7.7 </seealso>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public SwiftBlock2Input(final String value, boolean lenient)
		public SwiftBlock2Input(string value, bool lenient) : base()
		{
			this.setValue(value, lenient);
		}

		/// <summary>
		/// Default constructor
		/// </summary>
		public SwiftBlock2Input() : base()
		{
		}

		/// <summary>
		/// Copy constructor </summary>
		/// <param name="block"> an existing block2 to copy
		/// @since 7.10.4 </param>
		public SwiftBlock2Input(SwiftBlock2Input block) : this(block.MessageType, block.ReceiverAddress, block.MessagePriority, block.DeliveryMonitoring, block.ObsolescencePeriod)
		{
		}

		/// <summary>
		/// Sets the Message Type (MT) as classified and numbered by SWIFT.
		/// Three-digit FIN message type, example: 103
		/// </summary>
		/// <param name="messageType">
		///            String of 3 character </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setMessageType(final String messageType)
		public override string MessageType
		{
			set
			{
				this.messageType = value;
			}
			get
			{
				return messageType;
			}
		}


		/// <summary>
		/// Sets the receiver's address.<br> 
		/// It is fixed at 12 characters; it must have X in position 9
		/// (padded with "X" if no branch is required).
		/// </summary>
		/// <param name="receiverAddress"> 12 characters String </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setReceiverAddress(final String receiverAddress)
		public virtual string ReceiverAddress
		{
			set
			{
				this.receiverAddress = value;
			}
			get
			{
				return receiverAddress;
			}
		}

		/// <summary>
		/// Sets the receiver's address.<br> 
		/// </summary>
		/// <seealso cref= LogicalTerminalAddress#getReceiverLogicalTerminalAddress() </seealso>
		/// <param name="logicalTerminal">
		/// @since 7.6 </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setReceiverAddress(final LogicalTerminalAddress logicalTerminal)
		public virtual LogicalTerminalAddress ReceiverAddress
		{
			set
			{
				this.receiverAddress = value.ReceiverLogicalTerminalAddress;
			}
		}

		/// <summary>
		/// Creates a full LT address using the parameter BIC code and a default LT identifier.
		/// </summary>
		/// <seealso cref= #setReceiverAddress(LogicalTerminalAddress) </seealso>
		/// <param name="bic">
		/// @since 7.6 </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setReceiver(final BIC bic)
		public virtual BIC Receiver
		{
			set
			{
				ReceiverAddress = new LogicalTerminalAddress(value.Bic11);
			}
		}

		/// <summary>
		/// Completes if necessary and sets the LT address of the receiver.<br>
		/// The receiver addresses will be filled with proper default LT identifier and branch codes if not provided.
		/// </summary>
		/// <seealso cref= #setReceiverAddress(LogicalTerminalAddress)
		/// @since 7.6 </seealso>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setReceiver(final String receiver)
		public virtual string Receiver
		{
			set
			{
				ReceiverAddress = new LogicalTerminalAddress(value);
			}
		}



		/// <summary>
		/// Gets the receiver's BIC code from the receiver LT address.
		/// </summary>
		/// <returns> receiver BIC address </returns>
		/// <seealso cref= BIC
		/// @since 7.6 </seealso>
		public virtual BIC ReceiverBIC
		{
			get
			{
				return new BIC(this.receiverAddress);
			}
		}

		/// <summary>
		/// Sets the message priority as follows:<br>
		/// S = System<br>
		/// N = Normal<br>
		/// U = Urgent
		/// </summary>
		/// <param name="messagePriority"> String of 1 character  </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setMessagePriority(final String messagePriority)
		public override string MessagePriority
		{
			set
			{
				this.messagePriority = value;
			}
			get
			{
				return messagePriority;
			}
		}


		/// <summary>
		/// Sets the Delivery Monitoring field is as follows:<br>
		/// 1 = Non-Delivery Warning<br>
		/// 2 = Delivery Notification<br>
		/// 3 = Both valid, Non-Delivery Warning and Delivery Notification<br>
		/// This value is optional.<br>
		/// If the priority is U, delivery monitoring must be: 1 or 3.<br> 
		/// If the priority is N, delivery monitoring must be: 2 or not included.
		/// </summary>
		/// <param name="deliveryMonitoring"> String of 1 character containing the Delivery Monitoring field </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setDeliveryMonitoring(final String deliveryMonitoring)
		public virtual string DeliveryMonitoring
		{
			set
			{
				this.deliveryMonitoring = value;
			}
			get
			{
				return deliveryMonitoring;
			}
		}


		/// <summary>
		/// Gets the delivery monitoring as enum </summary>
		/// <returns> delivery monitoring enum value or null if the delivery monitoring is not set or contains an invalid value
		/// @since 7.8.4 </returns>
		public virtual DeliveryMonitoring DeliveryMonitoringType
		{
			get
			{
				if (this.deliveryMonitoring != null)
				{
					try
					{
						return DeliveryMonitoring.valueOf("_" + this.deliveryMonitoring);
					}
					catch (Exception e)
					{
	//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
	//ORIGINAL LINE: final String text = "Block2 deliveryMonitoring contains an invalid value ["+ this.deliveryMonitoring +"]";
						string text = "Block2 deliveryMonitoring contains an invalid value [" + this.deliveryMonitoring + "]";
						log.warning(text);
						log.log(Level.FINEST, text, e);
					}
				}
				return null;
			}
		}

		/// <summary>
		/// Sets the Obsolescence Period.<br> 
		/// It specifies when a non-delivery notification is generated as follows:<br>
		/// Valid for U = 003 (15 minutes)<br>
		/// Valid for N = 020 (100 minutes)<br>
		/// This value is optional.
		/// </summary>
		/// <param name="obsolescencePeriod"> String of 3 characters containing the Obsolescence Period </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setObsolescencePeriod(final String obsolescencePeriod)
		public virtual string ObsolescencePeriod
		{
			set
			{
				this.obsolescencePeriod = value;
			}
			get
			{
				return obsolescencePeriod;
			}
		}


		/// <summary>
		/// Tell if this block is empty or not.
		/// This block is considered to be empty if all its attributes are set to null. </summary>
		/// <returns> <code>true</code> if all fields are null and false in other case </returns>
		public override bool Empty
		{
			get
			{
				return messageType == null && receiverAddress == null && messagePriority == null && deliveryMonitoring == null && obsolescencePeriod == null;
			}
		}

		/// <summary>
		/// Gets the fixed length block 2 value, as a result of
		/// concatenating its individual elements as follow:<br>
		/// Message Type +
		/// Receivers address +
		/// Message Priority +
		/// Delivery Monitoring +
		/// Obsolescence Period.
		/// </summary>
		public override string Value
		{
			get
			{
				if (Empty)
				{
					return null;
				}
	//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
	//ORIGINAL LINE: final StringBuilder v = new StringBuilder("I");
				StringBuilder v = new StringBuilder("I");
				if (messageType != null)
				{
					v.Append(messageType);
				}
				if (receiverAddress != null)
				{
					v.Append(receiverAddress);
				}
				if (messagePriority != null)
				{
					v.Append(messagePriority);
				}
				if (deliveryMonitoring != null)
				{
					v.Append(deliveryMonitoring);
				}
				if (obsolescencePeriod != null)
				{
					v.Append(obsolescencePeriod);
				}
				return v.ToString();
			}
			set
			{
				setValue(value, false);
			}
		}

		/// <summary>
		/// Returns the block value </summary>
		/// <seealso cref= #getValue() </seealso>
		public override string BlockValue
		{
			get
			{
				return Value;
			}
			set
			{
				Value = value;
			}
		}


		/// <summary>
		/// Sets the block's attributes by parsing the string argument containing the blocks value.<br>
		/// This value can be in different flavors because some fields are optional.<br>
		/// Example of supported values:<br>
		/// <pre>
		/// "I100BANKDEFFXXXX"      (16) or "2:I100BANKDEFFXXXX"      (18)   // used for service/system messages
		/// "I100BANKDEFFXXXXU"     (17) or "2:I100BANKDEFFXXXXU"     (19)
		/// "I100BANKDEFFXXXXU3"    (18) or "2:I100BANKDEFFXXXXU3"    (20)
		/// "I100BANKDEFFXXXXU3003" (21) or "2:I100BANKDEFFXXXXU3003" (23)
		/// </pre><br>
		/// </summary>
		/// <param name="value"> string containing the entire blocks value </param>
		/// <param name="lenient"> if true the value will be parsed with a best effort heuristic, if false it will throw a IllegalArgumentException if the value has an invalid total size </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setValue(final String value, boolean lenient)
		public virtual void setValue(string value, bool lenient)
		{
			if (lenient)
			{
				//leave all attributes as null (cleaning defaults)
				clean();
			}
			else
			{
				// check parameters
				Validate.notNull(value, "value must not be null");
			}

			if (value != null)
			{
				int slen = value.Length;

				if (!lenient)
				{
					// check parameters
					Validate.notNull(value, "value must not be null");
					Validate.isTrue(slen >= 16 && slen <= 23, "expected a string value of 17 up to 23 chars and obtained a " + slen + " chars string: '" + value + "'");
				}

				// figure out the starting point and check the input value has proper optional
				int offset = 0;
				if (value.StartsWith("2:", StringComparison.Ordinal)) // accept 2:...
				{
					offset = 2;
				}

				slen -= offset;
				if (!lenient)
				{
					if (slen != 16 && slen != 17 && slen != 18 && slen != 21)
					{
						throw new System.ArgumentException("Value must match: I<mt><address>[<pri>[<monitoring>[<obsolescence>]]]");
					}
					if (char.ToUpper(value[offset]) != 'I')
					{
						throw new System.ArgumentException("Value must match: I<mt><address>[<pri>[<monitoring>[<obsolescence>]]]");
					}
				}
				offset++; // skip the input mark

				// separate value fragments
				int len = 3;
				this.MessageType = this.getValuePart(value, offset, len);
				offset += len;

				len = 12;
				this.ReceiverAddress = this.getValuePart(value, offset, len);
				offset += len;

				len = 1;
				this.MessagePriority = this.getValuePart(value, offset, len);
				offset += len; // optional (system messages)

				len = 1;
				this.DeliveryMonitoring = this.getValuePart(value, offset, len);
				offset += len; // optional

				if (lenient)
				{
					//get all remaining text
					this.ObsolescencePeriod = this.getValuePart(value, offset);
				}
				else
				{
					len = 3;
					this.ObsolescencePeriod = this.getValuePart(value, offset, len);
				}

			}
		}


		/// <summary>
		/// Sets all attributes to null
		/// @since 6.4
		/// </summary>
		public override void clean()
		{
			base.messagePriority = null;
			base.messageType = null;
			this.receiverAddress = null;
			this.deliveryMonitoring = null;
			this.obsolescencePeriod = null;
		}

		public override bool Equals(object o)
		{
			if (this == o)
			{
				return true;
			}
			if (o == null || this.GetType() != o.GetType())
			{
				return false;
			}
			if (!base.Equals(o))
			{
				return false;
			}
			SwiftBlock2Input that = (SwiftBlock2Input) o;
			return Objects.Equals(receiverAddress, that.receiverAddress) && Objects.Equals(deliveryMonitoring, that.deliveryMonitoring) && Objects.Equals(obsolescencePeriod, that.obsolescencePeriod);
		}

		public override int GetHashCode()
		{
			return Objects.hash(base.GetHashCode(), receiverAddress, deliveryMonitoring, obsolescencePeriod);
		}

		/// <summary>
		/// Legacy (version 1) json representation of this object.
		/// 
		/// <para>This implementation has been replaced by version 2, based on Gson.
		/// 
		/// </para>
		/// </summary>
		/// @deprecated use <seealso cref="#toJson()"/> instead
		/// @since 7.9.8 
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Deprecated("use <seealso cref="#toJson()"/> instead") @ProwideDeprecated(phase2 = com.prowidesoftware.deprecation.TargetYear._2019) public String toJsonV1()
		[Obsolete("use <seealso cref="#toJson()"/> instead")]
		public virtual string toJsonV1()
		{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final StringBuilder sb = new StringBuilder();
			StringBuilder sb = new StringBuilder();
			sb.Append("{ \n");

			sb.Append(" \"messageType\" : \"").Append(messageType).Append(SEPARATOR);
			sb.Append(" \"receiverAddress\" : \"").Append(receiverAddress).Append(SEPARATOR);
			sb.Append(" \"messagePriority\" : \"").Append(messagePriority).Append(SEPARATOR);
			sb.Append(" \"deliveryMonitoring\" : \"").Append(deliveryMonitoring).Append(SEPARATOR);
			sb.Append(" \"obsolescencePeriod\" : \"").Append(obsolescencePeriod).Append("\" \n");

			sb.Append("} ");
			return sb.ToString();
		}

		/// <summary>
		/// Generic getter for block attributes based on qualified names from <seealso cref="SwiftBlock2InputField"/> </summary>
		/// <param name="field"> field to get </param>
		/// <returns> field value or null if attribute is not set
		/// @since 7.7 </returns>
		public virtual string field(SwiftBlock2InputField field)
		{
			switch (field.InnerEnumValue())
			{
				case com.prowidesoftware.swift.model.SwiftBlock2InputField.InnerEnum.MessageType:
					return MessageType;
				case com.prowidesoftware.swift.model.SwiftBlock2InputField.InnerEnum.MessagePriority:
					return MessagePriority;
				case com.prowidesoftware.swift.model.SwiftBlock2InputField.InnerEnum.ReceiverAddress:
					return ReceiverAddress;
				case com.prowidesoftware.swift.model.SwiftBlock2InputField.InnerEnum.DeliveryMonitoring:
					return DeliveryMonitoring;
				case com.prowidesoftware.swift.model.SwiftBlock2InputField.InnerEnum.ObsolescencePeriod:
					return ObsolescencePeriod;
				default:
					return null;
			}
		}

		/// <summary>
		/// Generic setter for block attributes based on qualified names from <seealso cref="SwiftBlock2InputField"/> </summary>
		/// <param name="field"> field to get </param>
		/// <param name="value"> content to set
		/// @since 7.8 </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setField(SwiftBlock2InputField field, final String value)
		public virtual void setField(SwiftBlock2InputField field, string value)
		{
			switch (field.InnerEnumValue())
			{
				case com.prowidesoftware.swift.model.SwiftBlock2InputField.InnerEnum.MessageType:
					MessageType = value;
					break;
				case com.prowidesoftware.swift.model.SwiftBlock2InputField.InnerEnum.MessagePriority:
					MessagePriority = value;
					break;
				case com.prowidesoftware.swift.model.SwiftBlock2InputField.InnerEnum.ReceiverAddress:
					ReceiverAddress = value;
					break;
				case com.prowidesoftware.swift.model.SwiftBlock2InputField.InnerEnum.DeliveryMonitoring:
					DeliveryMonitoring = value;
					break;
				case com.prowidesoftware.swift.model.SwiftBlock2InputField.InnerEnum.ObsolescencePeriod:
					ObsolescencePeriod = value;
					break;
				default:
					log.warning("don't know how to set " + field + " to block2");
					break;
			}
		}

		/// <summary>
		/// Delivery monitoring values
		/// @since 7.8.4
		/// </summary>
		public sealed class DeliveryMonitoring
		{
			public static readonly DeliveryMonitoring _1 = new DeliveryMonitoring("_1", InnerEnum._1, "Non-Delivery Warning");
			public static readonly DeliveryMonitoring _2 = new DeliveryMonitoring("_2", InnerEnum._2, "Delivery Notification");
			public static readonly DeliveryMonitoring _3 = new DeliveryMonitoring("_3", InnerEnum._3, "Non-Delivery Warning and Delivery Notification");

			private static readonly IList<DeliveryMonitoring> valueList = new List<DeliveryMonitoring>();

			static DeliveryMonitoring()
			{
				valueList.Add(_1);
				valueList.Add(_2);
				valueList.Add(_3);
			}

			public enum InnerEnum
			{
				_1,
				_2,
				_3
			}

			private readonly string nameValue;
			private readonly int ordinalValue;
			private readonly InnerEnum innerEnumValue;
			private static int nextOrdinal = 0;

			internal string label;

//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: DeliveryMonitoring(final String label)
			internal DeliveryMonitoring(string name, InnerEnum innerEnum, SwiftBlock2Input outerInstance, string label)
			{
				this.outerInstance = outerInstance;
				this.label = label;

				nameValue = name;
				ordinalValue = nextOrdinal++;
				innerEnumValue = innerEnum;
			}

			public String Label
			{
				get
				{
					return this.label;
				}
			}

			public static IList<DeliveryMonitoring> values()
			{
				return valueList;
			}

			public InnerEnum InnerEnumValue()
			{
				return innerEnumValue;
			}

			public int ordinal()
			{
				return ordinalValue;
			}

			public override string ToString()
			{
				return nameValue;
			}

			public static DeliveryMonitoring valueOf(string name)
			{
				foreach (DeliveryMonitoring enumInstance in DeliveryMonitoring.values())
				{
					if (enumInstance.nameValue == name)
					{
						return enumInstance;
					}
				}
				throw new System.ArgumentException(name);
			}
		}

		/// <summary>
		/// This method deserializes the JSON data into an outgoing (input) block 2 object. </summary>
		/// <seealso cref= #toJson()
		/// @since 7.9.8 </seealso>
		public static SwiftBlock2Input fromJson(string json)
		{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final com.google.gson.Gson gson = new com.google.gson.GsonBuilder().create();
			Gson gson = (new GsonBuilder()).create();
			return gson.fromJson(json, typeof(SwiftBlock2Input));
		}
	}

}