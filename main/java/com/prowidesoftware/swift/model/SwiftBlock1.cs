using System;
using System.Text;

/*
 * Copyright 2006-2018 Prowide
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace com.prowidesoftware.swift.model
{

	using Gson = com.google.gson.Gson;
	using GsonBuilder = com.google.gson.GsonBuilder;
	using ServiceIdType = com.prowidesoftware.swift.model.mt.ServiceIdType;
	using Validate = org.apache.commons.lang3.Validate;


	/// <summary>
	/// Base class for SWIFT <b>Basic Header Block (block 1)</b>.
	/// It contains information about the source of the message.<br>
	/// 
	/// The basic header block is fixed-length and continuous with 
	/// no field delimiters. This class contains its 
	/// elements as individual attributes for easier management
	/// of the block value.<br>
	/// This block is mandatory for all SWIFT messages.
	/// 
	/// @author www.prowidesoftware.com
	/// @since 4.0
	/// </summary>
	//TODO: add parameter checks (Validate.*) and complete javadocs 
	[Serializable]
	public class SwiftBlock1 : SwiftValueBlock
	{
//JAVA TO C# CONVERTER WARNING: The .NET Type.FullName property will not always yield results identical to the Java Class.getName method:
		[NonSerialized]
		private static readonly java.util.logging.Logger log = java.util.logging.Logger.getLogger(typeof(SwiftBlock1).FullName);
		private const long serialVersionUID = 4229511645041690763L;

		/// <summary>
		/// Constant for FIN messages in application id
		/// @since 4.1
		/// </summary>
		[NonSerialized]
		public const string APPLICATION_ID_FIN = "F";

		/// <summary>
		/// Constant for GPA (General Purpose Application) messages in application id
		/// @since 4.1
		/// </summary>
		[NonSerialized]
		public const string APPLICATION_ID_GPA = "A";

		/// <summary>
		/// Constant for Logins and so messages in application id
		/// @since 4.1
		/// </summary>
		[NonSerialized]
		public const string APPLICATION_ID_LOGINS = "L";

		/// <summary>
		/// String of 1 character containing the Application ID as follows:<br>
		/// F = FIN (financial application)<br>
		/// A = GPA (general purpose application)<br>
		/// L = GPA (for logins, and so on)<br>
		/// This designates the application that has established the 
		/// association used to convey the message. You always use F for FIN messages.
		/// It is set by default to F (FIN messages).
		/// </summary>
		private string applicationId = "F";

		/// <summary>
		/// String of 2 characters containing Service ID as follows:<br>
		/// 01 = GPA/FIN	Message (system and user-to-user)<br>
		/// 02 = GPA	Login<br>
		/// 03 = GPA	Select<br>
		/// 05 = FIN	Quit<br>
		/// 06 = GPA	Logout<br>
		/// 12 = GPA	System Remove AP Request<br>
		/// 13 = GPA	System Abort AP Confirmation<br>
		/// 14 = GPA	System Remove LT Request<br>
		/// 15 = GPA	System Abort LT Confirmation<br>
		/// 21 = GPA/FIN	Message (ACK/NAK/UAK/UNK)<br>
		/// 22 = GPA	Login ACK (LAK)<br>
		/// 23 = GPA	Select ACK (SAK)<br>
		/// 25 = FIN	Quit ACK<br>
		/// 26 = GPA	Logout ACK<br>
		/// 33 = GPA	User Abort AP Request<br>
		/// 35 = GPA	User Abort LT Request<br>
		/// 42 = GPA	Login NAK (LNK)<br>
		/// 43 = GPA	Select NAK (SNK)
		/// It is set by default to 01 (FIN messages).
		/// </summary>
		private string serviceId = "01";

		/// <summary>
		/// The Logical Terminal address of the sender for messages 
		/// sent or the receiver for messages received from the 
		/// SWIFT network.<br> 
		/// Identifies a logical channel connection to SWIFT, and the network uses it
		/// for addressing. It is composed by the BIC code, an optional terminal
		/// identifier (A, B or C) if the institution has more than one terminal or an X,
		/// and the branch code (padded with "X" if no branch is used). 
		/// For example BFOOARBSAXXX or BFOOARBSXXXX.
		/// .
		/// </summary>
		private string logicalTerminal;

		/// <summary>
		/// Session number. 4 characters. It is generated by the user's computer. 
		/// As appropriate, the current application session number based 
		/// on the Login. It is padded with zeros.
		/// </summary>
		private string sessionNumber = "0000";

		/// <summary>
		/// Sequence number is a 6 characters string that is generated by the 
		/// user's computer.<br>
		/// For all FIN messages with a Service Identifier of 01 or 05, 
		/// this number is the next expected sequence number appropriate to 
		/// the direction of the transmission.<br>
		/// For FIN messages with a Service Identifier of 21 or 25, 
		/// the sequence number is that of the acknowledged service message.<br>
		/// It is padded with zeros.
		/// </summary>
		private string sequenceNumber = "000000";

		/// <summary>
		/// Constructor for specific values
		/// </summary>
		/// <param name="applicationId"> the application id </param>
		/// <param name="serviceId"> the service id </param>
		/// <param name="logicalTerminal"> the logical terminal name </param>
		/// <param name="sessionNumber"> the session number </param>
		/// <param name="sequenceNumber"> the message sequence number </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public SwiftBlock1(final String applicationId, final String serviceId, final String logicalTerminal, final String sessionNumber, final String sequenceNumber)
		public SwiftBlock1(string applicationId, string serviceId, string logicalTerminal, string sessionNumber, string sequenceNumber)
		{
			this.applicationId = applicationId;
			this.serviceId = serviceId;
			this.logicalTerminal = logicalTerminal;
			this.sessionNumber = sessionNumber;
			this.sequenceNumber = sequenceNumber;
		}

		/// <summary>
		/// Default constructor
		/// </summary>
		public SwiftBlock1() : base()
		{
		}

		/// <summary>
		/// Creates the block with lenient false, meaning it expects a fixed length value.
		/// Example of supported values:<br> 
		/// "F01BANKBEBBXXXX2222123456" or "1:F01BANKBEBBAXXX2222123456"
		/// </summary>
		/// <param name="value"> a fixed length string of 25 or 27 (which must start with '1:') characters containing the blocks value </param>
		/// <exception cref="IllegalArgumentException"> if parameter is not 25 or 27 characters </exception>
		/// <seealso cref= #SwiftBlock1(String, boolean) </seealso>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public SwiftBlock1(final String value)
		public SwiftBlock1(string value) : this(value, false)
		{
		}

		/// <summary>
		/// Creates a block 1 object setting attributes by parsing the fixed string argument;<br>
		/// </summary>
		/// <param name="value"> string containing the entire blocks value </param>
		/// <param name="lenient"> if true the value will be parsed with a best effort heuristic, if false it will throw a IllegalArgumentException if the value has an invalid total size </param>
		/// <seealso cref= #setValue(String, boolean)
		/// @since 7.7 </seealso>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public SwiftBlock1(final String value, boolean lenient)
		public SwiftBlock1(string value, bool lenient) : base()
		{
			this.setValue(value, lenient);
		}

		/// <summary>
		/// Copy constructor </summary>
		/// <param name="block"> an existing block1 to copy
		/// @since 7.10.4 </param>
		public SwiftBlock1(SwiftBlock1 block) : this(block.ApplicationId, block.ServiceId, block.LogicalTerminal, block.SessionNumber, block.SequenceNumber)
		{
		}

		/// <summary>
		/// Sets the block number. </summary>
		/// <param name="blockNumber"> the block number to set </param>
		/// <exception cref="IllegalArgumentException"> if parameter blockName is not the integer 1
		/// @since 5.0 </exception>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: protected void setBlockNumber(final Integer blockNumber)
		protected internal override int? BlockNumber
		{
			set
			{
    
				// sanity check
				Validate.notNull(value, "parameter 'blockNumber' cannot be null");
				Validate.isTrue((int)value == 1, "blockNumber must be 1");
			}
		}

		/// <summary>
		/// Sets the block name. Will cause an exception unless setting block number to 1. </summary>
		/// <param name="blockName"> the block name to set </param>
		/// <exception cref="IllegalArgumentException"> if parameter blockName is not the string "1"
		/// @since 5.0 </exception>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: protected void setBlockName(final String blockName)
		protected internal override string BlockName
		{
			set
			{
    
				// sanity check
				Validate.notNull(value, "parameter 'blockName' cannot be null");
				Validate.isTrue(value.CompareTo("1") == 0, "blockName must be string '1'");
			}
		}

		/// <summary>
		/// Returns the block number (the value 1 as an integer) </summary>
		/// <returns> Integer containing the block's number </returns>
		public override int? Number
		{
			get
			{
				return new int?(1);
			}
		}

		/// <summary>
		/// Returns the block name (the value 1 as a string) </summary>
		/// <returns> block name
		/// 
		/// @since 5.0 </returns>
		public override string Name
		{
			get
			{
				return "1";
			}
		}

		/// <summary>
		/// Sets the applicationId
		/// </summary>
		/// <param name="applicationId"> String of 1 character containing the Application ID (F, A or L) </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setApplicationId(final String applicationId)
		public virtual string ApplicationId
		{
			set
			{
				this.applicationId = value;
			}
			get
			{
				return applicationId;
			}
		}


		/// <summary>
		/// Sets the Service ID
		/// </summary>
		/// <param name="serviceId"> string of 2 characters containing Service ID (01, 02, 03, etc...) </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setServiceId(final String serviceId)
		public virtual string ServiceId
		{
			set
			{
				this.serviceId = value;
			}
			get
			{
				return serviceId;
			}
		}


		/// <summary>
		/// Sets the The Logical Terminal address with the parameter as it is given without any modification.
		/// 
		/// <para>Beware for an outgoing message the LT identifier cannot be X and the branch code must be padded with XXX if not present in
		/// the BIC address. The complete logical terminal address must always be a 12 characters length alphanumeric string
		/// 
		/// </para>
		/// </summary>
		/// <param name="logicalTerminal"> should be a fixed at 12 character length string; with the BIC address, LT identifier and branch code. </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setLogicalTerminal(final String logicalTerminal)
		public virtual string LogicalTerminal
		{
			set
			{
				this.logicalTerminal = value;
			}
			get
			{
				return logicalTerminal;
			}
		}

		/// <summary>
		/// Sets the LT address.<br>
		/// 
		/// <para>The implementation assumes the message is outgoing, and will tamper the LT identifier if necessary (changing an "X" LT identifier by and "A").
		/// </para>
		/// </summary>
		/// <seealso cref= LogicalTerminalAddress#getSenderLogicalTerminalAddress()
		/// </seealso>
		/// <param name="logicalTerminal"> the logical terminal address to set
		/// @since 7.6 </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setLogicalTerminal(final LogicalTerminalAddress logicalTerminal)
		public virtual LogicalTerminalAddress LogicalTerminal
		{
			set
			{
				this.logicalTerminal = value.SenderLogicalTerminalAddress;
			}
		}

		/// <summary>
		/// Sets the logical terminal address from the parameter BIC code with "A" as default LT identifier and XXX as default branch code. </summary>
		/// <seealso cref= #setLogicalTerminal(LogicalTerminalAddress)
		/// </seealso>
		/// <param name="bic"> a BIC code
		/// @since 7.6 </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setLogicalTerminal(final BIC bic)
		public virtual BIC LogicalTerminal
		{
			set
			{
				LogicalTerminal = new LogicalTerminalAddress(value.Bic11);
			}
		}

		/// <summary>
		/// Sets the logical terminal address from the parameter BIC.
		/// <para>If the LT identifier is not provided, "A" will be set as default. If the branch code is not provided XXX will be used as default.
		/// </para>
		/// <para>The implementation assumes the message is outgoing, and if the full logical terminal address is provided with an "X" as LT identifier, it wil be replaced by and "A".
		/// </para>
		/// </summary>
		/// <seealso cref= #setLogicalTerminal(LogicalTerminalAddress)
		/// </seealso>
		/// <param name="sender"> a BIC8, BIC11 or full 12 character length logical terminal address
		/// @since 6.4 </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setSender(final String sender)
		public virtual string Sender
		{
			set
			{
				LogicalTerminal = new LogicalTerminalAddress(value);
			}
		}

		/// <summary>
		/// Gets the BIC code from the LT address.<br>
		/// </summary>
		/// <returns> the BIC object 
		/// @since 7.6 </returns>
		public virtual BIC BIC
		{
			get
			{
				return new BIC(this.logicalTerminal);
			}
		}


		/// <summary>
		/// Sets the Session number. It is generated by the user's computer. 
		/// As appropriate, the current application session number based 
		/// on the Login. It is padded with zeros.
		/// </summary>
		/// <param name="sessionNumber"> 4 numbers. </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setSessionNumber(final String sessionNumber)
		public virtual string SessionNumber
		{
			set
			{
				this.sessionNumber = value;
			}
			get
			{
				return sessionNumber;
			}
		}


		/// <summary>
		/// Sets the Sequence number that is generated by the 
		/// user's computer.<br>
		/// For all FIN messages with a Service Identifier of 01 or 05, 
		/// this number is the next expected sequence number appropriate to 
		/// the direction of the transmission.<br>
		/// For FIN messages with a Service Identifier of 21 or 25, 
		/// the sequence number is that of the acknowledged service message.<br>
		/// It is padded with zeros.
		/// </summary>
		/// <param name="sequenceNumber"> 6 numbers </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setSequenceNumber(final String sequenceNumber)
		public virtual string SequenceNumber
		{
			set
			{
				this.sequenceNumber = value;
			}
			get
			{
				return sequenceNumber;
			}
		}


		/// <summary>
		/// Tell if this block is empty or not.
		/// This block is considered to be empty if all its attributes are set to null. </summary>
		/// <returns> <code>true</code> if all fields are null and false in other case </returns>
		public override bool Empty
		{
			get
			{
				return applicationId == null && serviceId == null && logicalTerminal == null && sessionNumber == null && sequenceNumber == null;
			}
		}

		/// <summary>
		/// Gets the fixed length block 1 value, as a result of
		/// concatenating its individual elements as follow:<br>
		/// Application ID Service ID +
		/// Logical terminal (LT) address +
		/// Session number +
		/// Sequence number.<br>
		/// Notice that this method does not return the "1:" string.
		/// </summary>
		public override string Value
		{
			get
			{
				if (Empty)
				{
					return null;
				}
	//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
	//ORIGINAL LINE: final StringBuilder v = new StringBuilder();
				StringBuilder v = new StringBuilder();
				if (applicationId != null)
				{
					v.Append(applicationId);
				}
				if (serviceId != null)
				{
					v.Append(serviceId);
				}
				if (logicalTerminal != null)
				{
					v.Append(logicalTerminal);
				}
				if (sessionNumber != null)
				{
					v.Append(sessionNumber);
				}
				if (sequenceNumber != null)
				{
					v.Append(sequenceNumber);
				}
				return v.ToString();
			}
			set
			{
				setValue(value, false);
			}
		}

		/// <seealso cref= #getValue() </seealso>
		public override string BlockValue
		{
			get
			{
				return Value;
			}
			set
			{
				Value = value;
			}
		}


		/// <summary>
		/// Sets the block's attributes by parsing string argument with its content<br>
		/// This value can be in different flavors because some fields are optional.<br>
		/// For example "F01BANKBEBBAXXX2222123456" or "1:F01BANKBEBBAXXX2222123456".
		/// </summary>
		/// <param name="value"> string containing the entire blocks value </param>
		/// <param name="lenient"> if true the value will be parsed with a best effort heuristic, if false it will throw a IllegalArgumentException if the value has an invalid total size </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setValue(final String value, boolean lenient)
		public virtual void setValue(string value, bool lenient)
		{
			if (lenient)
			{
				//leave all attributes as null (cleaning defaults)
				clean();
			}
			else
			{
				// check parameters
				Validate.notNull(value, "value must not be null");
			}

			if (value != null)
			{
				int offset = 0;
				int slen = value.Length;

				// figure out the starting point
				if (value.StartsWith("1", StringComparison.Ordinal))
				{
					if (!lenient)
					{
						Validate.isTrue(value.StartsWith("1:", StringComparison.Ordinal), "expected '1:' at the beginning of value and found '" + value.Substring(0, 1) + "'");
						Validate.isTrue(slen == 26 || slen == 27, "block value " + value + " cannot be parsed because it has an invalid size, expected 26 or 27 and found " + value.Length);
					}
					offset = 2;
				}
				else
				{
					if (!lenient)
					{
						Validate.isTrue(slen == 24 || slen == 25, "block value " + value + " cannot be parsed because it has an invalid size, expected 24 or 25 and found " + value.Length);
					}
				}

				// separate value fragments
				int len = 1;
				this.ApplicationId = this.getValuePart(value, offset, len);
				offset += len;

				len = 2;
				this.ServiceId = this.getValuePart(value, offset, len);
				offset += len;

				//LT address must be fixed to 12 characters padding both the LT id and the branch with X if necessary
				len = 12;
				this.LogicalTerminal = this.getValuePart(value, offset, len);
				offset += len;

				len = 4;
				this.SessionNumber = this.getValuePart(value, offset, len);
				offset += len;

				if (lenient)
				{
					//get all remaining text
					this.SequenceNumber = this.getValuePart(value, offset);
				}
				else
				{
					//get text between size boundaries
					len = 6;
					this.SequenceNumber = this.getValuePart(value, offset, len);
				}
			}
		}


		/// <summary>
		/// Sets all attributes to null
		/// @since 6.4
		/// </summary>
		public virtual void clean()
		{
			applicationId = null;
			serviceId = null;
			logicalTerminal = null;
			sessionNumber = null;
			sequenceNumber = null;
		}

		public override bool Equals(object o)
		{
			if (this == o)
			{
				return true;
			}
			if (o == null || this.GetType() != o.GetType())
			{
				return false;
			}
			if (!base.Equals(o))
			{
				return false;
			}
			SwiftBlock1 that = (SwiftBlock1) o;
			return Objects.Equals(applicationId, that.applicationId) && Objects.Equals(serviceId, that.serviceId) && Objects.Equals(logicalTerminal, that.logicalTerminal) && Objects.Equals(sessionNumber, that.sessionNumber) && Objects.Equals(sequenceNumber, that.sequenceNumber);
		}

		public override int GetHashCode()
		{
			return Objects.hash(base.GetHashCode(), applicationId, serviceId, logicalTerminal, sessionNumber, sequenceNumber);
		}

		/// <summary>
		/// Get a json representation of this object.
		///    
		/// Example:<br>
		/// <pre>
		/// {
		/// "applicationId": "F",
		/// "serviceId": "01",
		/// "logicalTerminal": "FOOSEDR0AXXX",
		/// "sessionNumber": "0000",
		/// "sequenceNumber": "000000"
		/// }
		///  </pre>
		///    
		/// @since 7.5
		/// </summary>
		public virtual string toJson()
		{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final com.google.gson.Gson gson = new com.google.gson.GsonBuilder().create();
			Gson gson = (new GsonBuilder()).create();
			return gson.toJson(this);
		}

		/// <summary>
		/// This method deserializes the JSON data into an block 1 object. </summary>
		/// <seealso cref= #toJson()
		/// @since 7.9.8 </seealso>
		public static SwiftBlock1 fromJson(string json)
		{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final com.google.gson.Gson gson = new com.google.gson.GsonBuilder().create();
			Gson gson = (new GsonBuilder()).create();
			return gson.fromJson(json,typeof(SwiftBlock1));
		}

		/// <summary>
		/// Generic getter for block attributes based on qualified names from <seealso cref="SwiftBlock1Field"/> </summary>
		/// <param name="field"> field to get </param>
		/// <returns> field value or null if attribute is not set
		/// @since 7.7 </returns>
		public virtual string field(SwiftBlock1Field field)
		{
			switch (field.InnerEnumValue())
			{
				case com.prowidesoftware.swift.model.SwiftBlock1Field.InnerEnum.ApplicationId:
					return ApplicationId;
				case com.prowidesoftware.swift.model.SwiftBlock1Field.InnerEnum.ServiceId:
					return ServiceId;
				case com.prowidesoftware.swift.model.SwiftBlock1Field.InnerEnum.LogicalTerminal:
					return LogicalTerminal;
				case com.prowidesoftware.swift.model.SwiftBlock1Field.InnerEnum.SessionNumber:
					return SessionNumber;
				case com.prowidesoftware.swift.model.SwiftBlock1Field.InnerEnum.SequenceNumber:
					return SequenceNumber;
				default:
					return null;
			}
		}

		/// <summary>
		/// Generic setter for block attributes based on qualified names from <seealso cref="SwiftBlock1Field"/> </summary>
		/// <param name="field"> field to set </param>
		/// <param name="value"> content to set
		/// @since 7.8 </param>
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
//ORIGINAL LINE: public void setField(SwiftBlock1Field field, final String value)
		public virtual void setField(SwiftBlock1Field field, string value)
		{
			switch (field.InnerEnumValue())
			{
				case com.prowidesoftware.swift.model.SwiftBlock1Field.InnerEnum.ApplicationId:
					ApplicationId = value;
					break;
				case com.prowidesoftware.swift.model.SwiftBlock1Field.InnerEnum.ServiceId:
					ServiceId = value;
					break;
				case com.prowidesoftware.swift.model.SwiftBlock1Field.InnerEnum.LogicalTerminal:
					LogicalTerminal = value;
					break;
				case com.prowidesoftware.swift.model.SwiftBlock1Field.InnerEnum.SessionNumber:
					SessionNumber = value;
					break;
				case com.prowidesoftware.swift.model.SwiftBlock1Field.InnerEnum.SequenceNumber:
					SequenceNumber = value;
					break;
				default:
					log.warning("don't know how to set " + field + " to block1");
					break;
			}
		}

		/// <summary>
		/// Maps the service id to the service id enumeration </summary>
		/// <returns> the mapped enumeration or null if service id not present or cannot be mapped
		/// @since 7.8.3 </returns>
		public virtual ServiceIdType ServiceIdType
		{
			get
			{
				try
				{
					return ServiceIdType.valueOf("_" + this.serviceId);
				}
				catch (Exception e)
				{
	//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
	//ORIGINAL LINE: final String text = "Block1 serviceId contains an invalid value ["+ this.serviceId +"]. The expected values are "+com.prowidesoftware.swift.model.mt.ServiceIdType.values();
					string text = "Block1 serviceId contains an invalid value [" + this.serviceId + "]. The expected values are " + ServiceIdType.values();
					log.warning(text);
					log.log(Level.FINEST, text, e);
					return null;
				}
			}
		}
	}

}